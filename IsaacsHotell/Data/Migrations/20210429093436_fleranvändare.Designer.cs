// <auto-generated />
using System;
using IsaacsHotell.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IsaacsHotell.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210429093436_fleranvändare")]
    partial class fleranvändare
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IsaacsHotell.Data.Användare", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Efternamn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Namn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "02174cf0–9412–4cfe-afbf-59f706d72cf6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d9044c46-16c1-4c87-9e6e-a40f98927720",
                            Efternamn = "Wagner",
                            Email = "Mrwagner@hotellet.se",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Namn = "Karl",
                            NormalizedEmail = "mrwagner@HOTELLET.SE",
                            NormalizedUserName = "MRWAGNER@HOTELLET.SE",
                            PasswordHash = "AQAAAAEAACcQAAAAEFgcvcX1IMIBLwYx0dtUycq5JVrgvRL62gvqAPpkUHq/6s+/3kudhl6YVHsmwmrAaA==",
                            PhoneNumber = "0713371337",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "e6bd12f1-9e20-41bd-92b8-37601b51db96",
                            TwoFactorEnabled = false,
                            UserName = "mrwagner@hotellet.se"
                        },
                        new
                        {
                            Id = "02123cf0–9652–4cde-afaf-59f706c72cf6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f2ed9692-f462-4b60-b35a-39568baa51f3",
                            Efternamn = "Wagner",
                            Email = "Mrswagner@hotellet.se",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Namn = "Amanda",
                            NormalizedEmail = "mrswagner@HOTELLET.SE",
                            NormalizedUserName = "MRSWAGNER@HOTELLET.SE",
                            PasswordHash = "AQAAAAEAACcQAAAAEOHNIAUDyqTZ2gvMxUEolfNNN8Un1W5uNEJtf2SjkfiqMAawyivIp8uh2MyL+2LjJg==",
                            PhoneNumber = "0713371338",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "c752f761-8e5b-446a-a336-d61a935d5c43",
                            TwoFactorEnabled = false,
                            UserName = "mrswagner@hotellet.se"
                        },
                        new
                        {
                            Id = "452349f0-da4s–5d6s-pqwe-59kmoldp78df6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "72c4b304-c959-4ed3-890b-bb10b99f5ee7",
                            Efternamn = "Algotsson",
                            Email = "Algot@hotellet.se",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Namn = "Algot",
                            NormalizedEmail = "Algot@HOTELLET.SE",
                            NormalizedUserName = "ALGOT@HOTELLET.SE",
                            PasswordHash = "AQAAAAEAACcQAAAAEIKv9/Nz/YcxqtxqNM0A6zKY8jVO1oW3lj3VJfwizg3L1qkdNzF9t4Kkpfoa204zAQ==",
                            PhoneNumber = "0784545884",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "9426c766-3b9c-4c07-8910-424bc35b2bda",
                            TwoFactorEnabled = false,
                            UserName = "Algot@hotellet.se"
                        },
                        new
                        {
                            Id = "451029f0-da4s–5css-pawe-59kmolad21df6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "86d884b9-c951-4c6e-a3ed-84cd5deee65b",
                            Efternamn = "Beritsson",
                            Email = "Berit@hotellet.se",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Namn = "Berit",
                            NormalizedEmail = "BERIT@HOTELLET.SE",
                            NormalizedUserName = "BERIT@HOTELLET.SE",
                            PasswordHash = "AQAAAAEAACcQAAAAEMwl3GLxnMO/F4gHJE5+JIRGWlYmI1quWizmboru17JhNGOlb6h6EgEP4+53xEMvNw==",
                            PhoneNumber = "0784545884",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "1facfd36-1abf-49ab-90da-2609531829be",
                            TwoFactorEnabled = false,
                            UserName = "berit@hotellet.se"
                        },
                        new
                        {
                            Id = "446929f0-dv2s–5csr-aawe-59ktylad21df6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c509c928-d8ae-4dce-8755-4d78eb834c6c",
                            Efternamn = "Stark",
                            Email = "Ceasar@hotellet.se",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Namn = "Ceasar",
                            NormalizedEmail = "Ceasar@HOTELLET.SE",
                            NormalizedUserName = "CEASAR@HOTELLET.SE",
                            PasswordHash = "AQAAAAEAACcQAAAAEJRSW/ZK9uKkiwrnUTUamNO71WA5KKn2i200iBixtlmEEXq5S8L6R18ecRG6t4OdgQ==",
                            PhoneNumber = "0784545884",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "c87cd9e8-e28f-4e28-a24e-cabcf7347502",
                            TwoFactorEnabled = false,
                            UserName = "Ceasar@hotellet.se"
                        },
                        new
                        {
                            Id = "569842f0-78dw–65ws-qwbf-59dafgqw345f6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a62b0b32-4571-4e1b-8289-cb7862ae8182",
                            Efternamn = "Ruskie",
                            Email = "Bernard@hotellet.se",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Namn = "Bernard",
                            NormalizedEmail = "BERNARD@HOTELLET.SE",
                            NormalizedUserName = "BERNARD@HOTELLET.SE",
                            PasswordHash = "AQAAAAEAACcQAAAAEHLX5N/3dqWHPvjs9jK1ZqLTRqiiCU5gLzL5oKyTabv0XwaksUCpWjWauXlCZRwF8Q==",
                            PhoneNumber = "0748612345",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "763f5548-8f69-458f-8687-40300c45d1be",
                            TwoFactorEnabled = false,
                            UserName = "Bernard@hotellet.se"
                        },
                        new
                        {
                            Id = "569878f0-71bw–6hwq-qnmf-59dafgqg035f6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "463d7644-1edf-4e22-8883-5fba1329ecbd",
                            Efternamn = "Lotr",
                            Email = "Alva@hotellet.se",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Namn = "Alva",
                            NormalizedEmail = "ALVA@HOTELLETS.SE",
                            NormalizedUserName = "ALVA@HOTELLETS.SE",
                            PasswordHash = "AQAAAAEAACcQAAAAEJGC2igOfXjYUcIbiOg0gertvtDJ0muqifp0UVCCPJbKtVdTOjluJaec4eKmvMG0Lg==",
                            PhoneNumber = "0748612345",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "91309744-1dc7-48d1-b60f-04165b43e4b3",
                            TwoFactorEnabled = false,
                            UserName = "Alva@hotellet.se"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "341743f0-asd2–42de-afbf-59kmkkmk72cf6",
                            ConcurrencyStamp = "341743f0-asd2–42de-afbf-59kmkkmk72cf6",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "334567f0-whj2–47de-atyf-59qbvcse96cf6",
                            ConcurrencyStamp = "334567f0-whj2–47de-atyf-59qbvcse96cf6",
                            Name = "Reception",
                            NormalizedName = "RECEPTION"
                        },
                        new
                        {
                            Id = "912345f0-hgd2–41ae-vnqf-59ghjknm72cf6",
                            ConcurrencyStamp = "912345f0-hgd2–41ae-vnqf-59ghjknm72cf6",
                            Name = "Cleaner",
                            NormalizedName = "CLEANER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "02174cf0–9412–4cfe-afbf-59f706d72cf6",
                            RoleId = "341743f0-asd2–42de-afbf-59kmkkmk72cf6"
                        },
                        new
                        {
                            UserId = "569878f0-71bw–6hwq-qnmf-59dafgqg035f6",
                            RoleId = "912345f0-hgd2–41ae-vnqf-59ghjknm72cf6"
                        },
                        new
                        {
                            UserId = "569842f0-78dw–65ws-qwbf-59dafgqw345f6",
                            RoleId = "912345f0-hgd2–41ae-vnqf-59ghjknm72cf6"
                        },
                        new
                        {
                            UserId = "446929f0-dv2s–5csr-aawe-59ktylad21df6",
                            RoleId = "334567f0-whj2–47de-atyf-59qbvcse96cf6"
                        },
                        new
                        {
                            UserId = "451029f0-da4s–5css-pawe-59kmolad21df6",
                            RoleId = "334567f0-whj2–47de-atyf-59qbvcse96cf6"
                        },
                        new
                        {
                            UserId = "452349f0-da4s–5d6s-pqwe-59kmoldp78df6",
                            RoleId = "334567f0-whj2–47de-atyf-59qbvcse96cf6"
                        },
                        new
                        {
                            UserId = "02123cf0–9652–4cde-afaf-59f706c72cf6",
                            RoleId = "341743f0-asd2–42de-afbf-59kmkkmk72cf6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("IsaacsHotell.Data.Användare", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("IsaacsHotell.Data.Användare", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IsaacsHotell.Data.Användare", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("IsaacsHotell.Data.Användare", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
