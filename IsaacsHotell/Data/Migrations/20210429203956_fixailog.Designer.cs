// <auto-generated />
using System;
using IsaacsHotell.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IsaacsHotell.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210429203956_fixailog")]
    partial class fixailog
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IsaacsHotell.Data.Användare", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Efternamn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Namn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "02174cf0–9412–4cfe-afbf-59f706d72cf6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d6c2e2af-3e13-4db2-b0a2-807916b11e7d",
                            Efternamn = "Wagner",
                            Email = "Mrwagner@hotellet.se",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Namn = "Karl",
                            NormalizedEmail = "mrwagner@HOTELLET.SE",
                            NormalizedUserName = "MRWAGNER@HOTELLET.SE",
                            PasswordHash = "AQAAAAEAACcQAAAAENsa/U3zKPgICRh/07UHPKjmpoD4i85b89tylDnG2sPlnCR0eLKnCnYiNhVingLQqg==",
                            PhoneNumber = "0713371337",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "b91e57b5-1d31-4381-ba69-472f51fb8e58",
                            TwoFactorEnabled = false,
                            UserName = "mrwagner@hotellet.se"
                        },
                        new
                        {
                            Id = "02123cf0–9652–4cde-afaf-59f706c72cf6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "844192c7-dd28-43fe-888e-b4afc9058469",
                            Efternamn = "Wagner",
                            Email = "Mrswagner@hotellet.se",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Namn = "Amanda",
                            NormalizedEmail = "mrswagner@HOTELLET.SE",
                            NormalizedUserName = "MRSWAGNER@HOTELLET.SE",
                            PasswordHash = "AQAAAAEAACcQAAAAEIvw0lmDMKtjUFcZnuGLA3XczfRFdWPdXlpZk/2keakD7rdE43swrHKpLCQkmI0oAw==",
                            PhoneNumber = "0713371338",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "a85c2e51-493d-47a9-9113-58fcbac15ebf",
                            TwoFactorEnabled = false,
                            UserName = "mrswagner@hotellet.se"
                        },
                        new
                        {
                            Id = "452349f0-da4s–5d6s-pqwe-59kmoldp78df6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "60f5d786-0ee6-4c28-9b3e-d49b6cbe1245",
                            Efternamn = "Algotsson",
                            Email = "Algot@hotellet.se",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Namn = "Algot",
                            NormalizedEmail = "Algot@HOTELLET.SE",
                            NormalizedUserName = "ALGOT@HOTELLET.SE",
                            PasswordHash = "AQAAAAEAACcQAAAAEME8F0R0VRwr6YSkZI0MSRO19uM6mX7cTn/62w3KFaV5rbX2nAjKB4nIkRm9palusg==",
                            PhoneNumber = "0784545884",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "27af47f0-66e1-420c-9a6a-a606f5aa93a3",
                            TwoFactorEnabled = false,
                            UserName = "Algot@hotellet.se"
                        },
                        new
                        {
                            Id = "451029f0-da4s–5css-pawe-59kmolad21df6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "66a5ba3c-d6c1-47aa-9f32-64320a117401",
                            Efternamn = "Beritsson",
                            Email = "Berit@hotellet.se",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Namn = "Berit",
                            NormalizedEmail = "BERIT@HOTELLET.SE",
                            NormalizedUserName = "BERIT@HOTELLET.SE",
                            PasswordHash = "AQAAAAEAACcQAAAAEDa3N2NUj66+g8AewSVHyRipx3plxn8fqJviaMn/KbcWeV17TVT/7iOGhQmhFxs/Dw==",
                            PhoneNumber = "0784545884",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "f6d5d711-3bb2-4e5b-b8a6-9eae812aa448",
                            TwoFactorEnabled = false,
                            UserName = "berit@hotellet.se"
                        },
                        new
                        {
                            Id = "446929f0-dv2s–5csr-aawe-59ktylad21df6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8aade405-2a4d-44ce-83ef-56102082bbc3",
                            Efternamn = "Stark",
                            Email = "Ceasar@hotellet.se",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Namn = "Ceasar",
                            NormalizedEmail = "Ceasar@HOTELLET.SE",
                            NormalizedUserName = "CEASAR@HOTELLET.SE",
                            PasswordHash = "AQAAAAEAACcQAAAAEPlfwXHepdeHlT4y1AQ23n0PtegYIwT+xiYKwHJLNCuHYl+xYIHkDqizrVeD9NbmrA==",
                            PhoneNumber = "0784545884",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "c4ab96be-9544-4193-bd1c-f3dc37c3d29c",
                            TwoFactorEnabled = false,
                            UserName = "Ceasar@hotellet.se"
                        },
                        new
                        {
                            Id = "569842f0-78dw–65ws-qwbf-59dafgqw345f6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b3634320-b335-4a54-9374-30f2821a2d35",
                            Efternamn = "Ruskie",
                            Email = "Bernard@hotellet.se",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Namn = "Bernard",
                            NormalizedEmail = "BERNARD@HOTELLET.SE",
                            NormalizedUserName = "BERNARD@HOTELLET.SE",
                            PasswordHash = "AQAAAAEAACcQAAAAEMsequRs+RBJoZu83U4N4uH/kF8aay2c6ebsrM+FWmAHkU203a1S5dqFpnw7DwcjDw==",
                            PhoneNumber = "0748612345",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "e6c654cb-261b-4e53-8e63-7759814a41cf",
                            TwoFactorEnabled = false,
                            UserName = "Bernard@hotellet.se"
                        },
                        new
                        {
                            Id = "569878f0-71bw–6hwq-qnmf-59dafgqg035f6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9aafff35-1a07-4265-a617-ca684b7d98c6",
                            Efternamn = "Lotr",
                            Email = "Alva@hotellet.se",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Namn = "Alva",
                            NormalizedEmail = "ALVA@HOTELLET.SE",
                            NormalizedUserName = "ALVA@HOTELLET.SE",
                            PasswordHash = "AQAAAAEAACcQAAAAEMJufgbQcNjrCXl2vvl8kOplqxadMz6oXExkFkyTNHTttIEsrcyCSfrtArU6bOXu1Q==",
                            PhoneNumber = "0748612345",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "749c4ed3-982a-4355-931e-7ad5deb7b772",
                            TwoFactorEnabled = false,
                            UserName = "Alva@hotellet.se"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "341743f0-asd2–42de-afbf-59kmkkmk72cf6",
                            ConcurrencyStamp = "341743f0-asd2–42de-afbf-59kmkkmk72cf6",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "334567f0-whj2–47de-atyf-59qbvcse96cf6",
                            ConcurrencyStamp = "334567f0-whj2–47de-atyf-59qbvcse96cf6",
                            Name = "Reception",
                            NormalizedName = "RECEPTION"
                        },
                        new
                        {
                            Id = "912345f0-hgd2–41ae-vnqf-59ghjknm72cf6",
                            ConcurrencyStamp = "912345f0-hgd2–41ae-vnqf-59ghjknm72cf6",
                            Name = "Cleaner",
                            NormalizedName = "CLEANER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "02174cf0–9412–4cfe-afbf-59f706d72cf6",
                            RoleId = "341743f0-asd2–42de-afbf-59kmkkmk72cf6"
                        },
                        new
                        {
                            UserId = "569878f0-71bw–6hwq-qnmf-59dafgqg035f6",
                            RoleId = "912345f0-hgd2–41ae-vnqf-59ghjknm72cf6"
                        },
                        new
                        {
                            UserId = "569842f0-78dw–65ws-qwbf-59dafgqw345f6",
                            RoleId = "912345f0-hgd2–41ae-vnqf-59ghjknm72cf6"
                        },
                        new
                        {
                            UserId = "446929f0-dv2s–5csr-aawe-59ktylad21df6",
                            RoleId = "334567f0-whj2–47de-atyf-59qbvcse96cf6"
                        },
                        new
                        {
                            UserId = "451029f0-da4s–5css-pawe-59kmolad21df6",
                            RoleId = "334567f0-whj2–47de-atyf-59qbvcse96cf6"
                        },
                        new
                        {
                            UserId = "452349f0-da4s–5d6s-pqwe-59kmoldp78df6",
                            RoleId = "334567f0-whj2–47de-atyf-59qbvcse96cf6"
                        },
                        new
                        {
                            UserId = "02123cf0–9652–4cde-afaf-59f706c72cf6",
                            RoleId = "341743f0-asd2–42de-afbf-59kmkkmk72cf6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("IsaacsHotell.Data.Användare", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("IsaacsHotell.Data.Användare", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IsaacsHotell.Data.Användare", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("IsaacsHotell.Data.Användare", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
